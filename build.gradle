plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.0'
}

// 루트에서 빌드 JAR 비활성화
bootJar.enabled = false
jar.enabled     = false

allprojects {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://jitpack.io" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.bizondam'
    version = '0.0.1-SNAPSHOT'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    ext {
        set('springCloudVersion', "2024.0.1")
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    if (project.name == 'common') {
        bootJar.enabled = false
        jar.enabled     = true

        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter:3.0.4'
            implementation 'org.projectlombok:lombok:1.18.30'
            annotationProcessor 'org.projectlombok:lombok:1.18.30'
        }
    } else {
        apply plugin: 'org.springframework.boot'

        bootJar.enabled = true
        jar.enabled     = false

        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter'
            implementation 'org.springframework.boot:spring-boot-starter-actuator'
            implementation 'org.springframework.boot:spring-boot-starter-validation'
            implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'
            implementation "org.springframework.boot:spring-boot-starter-security"
            testImplementation 'org.springframework.boot:spring-boot-starter-test'

            compileOnly      'org.projectlombok:lombok:1.18.30'
            annotationProcessor 'org.projectlombok:lombok:1.18.30'
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.annotationProcessorPath = configurations.annotationProcessor
    }
}